apply plugin: 'com.android.library'

apply plugin: 'signing'
apply plugin: 'maven-publish'

version = "6.2.2"
def min_plugin_version = "3.4.0"

android {
    compileSdkVersion rootProject.ext.compile_sdk_version

    resourcePrefix "sensors_analytics_"

    defaultConfig {
        minSdkVersion rootProject.ext.min_sdk_version
        targetSdkVersion rootProject.ext.target_sdk_version
        versionCode 1
        versionName "1.0"
        consumerProguardFiles 'proguard-rules.pro'
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField("String", "SDK_VERSION", "\"${version}\"")
            buildConfigField("String", "MIN_PLUGIN_VERSION", "\"${min_plugin_version}\"")
            manifestPlaceholders = ["SENSORSDATA_SDK_VERSION": "${version}"]
        }

        debug {
            buildConfigField("String", "SDK_VERSION", "\"${version}\"")
            buildConfigField("String", "MIN_PLUGIN_VERSION", "\"${min_plugin_version}\"")
            manifestPlaceholders = ["SENSORSDATA_SDK_VERSION": "${version}"]
        }
    }

    testOptions {
        unitTests.all {
            testLogging {
                events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
                outputs.upToDateWhen { false }
                showStandardStreams = true
            }
        }
        unitTests.includeAndroidResources = true
    }
    /*lintOptions {
        abortOnError false
        //checkReleaseBuilds false
    }*/
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    testImplementation "junit:junit:$junitVersion"
    androidTestImplementation "androidx.test:core:$androidXTestVersion"
    androidTestImplementation "androidx.test:runner:$androidXTestVersion"
    androidTestImplementation "androidx.test:rules:$androidXTestVersion"
    androidTestImplementation "androidx.test.ext:junit:$androidXTestVersion"
    // Espresso dependencies
    androidTestImplementation "androidx.test.espresso:espresso-core:$espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-intents:$espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-accessibility:$espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-web:$espressoVersion"
    androidTestImplementation "androidx.test.espresso.idling:idling-concurrent:$espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-idling-resource:$espressoVersion"
    androidTestImplementation "org.mockito:mockito-core:$mockitoVersion"
    androidTestImplementation "org.mockito:mockito-android:$mockitoVersion"
    //Robolectric & JVM test
    testImplementation "androidx.test:core:$androidXTestVersion"
    testImplementation "androidx.test.ext:junit:$androidXTestVersion"
    testImplementation "org.robolectric:robolectric:$robolectricVersion"
    testImplementation "androidx.test.espresso:espresso-core:$espressoVersion"
    testImplementation "androidx.test.espresso:espresso-contrib:$espressoVersion"
    testImplementation "androidx.test.espresso:espresso-intents:$espressoVersion"
    testImplementation "androidx.test.espresso:espresso-accessibility:$espressoVersion"
    testImplementation "androidx.test.espresso:espresso-web:$espressoVersion"
    testImplementation "androidx.test.espresso.idling:idling-concurrent:$espressoVersion"
    testImplementation "org.robolectric:robolectric:$robolectricVersion"
    //mock
    testImplementation "org.mockito:mockito-core:$mockitoVersion"
    testImplementation "org.mockito:mockito-android:$mockitoVersion"
    testImplementation "org.powermock:powermock-module-junit4:$powerMock"
    testImplementation "org.powermock:powermock-api-mockito2:$powerMock"
    testImplementation "org.powermock:powermock-module-testng:$powerMock"
    testImplementation "org.powermock:powermock-core:$powerMock"

}

afterEvaluate {
    assembleRelease {
        doLast {
            copy {
                def rootPath = getProjectDir().getAbsolutePath()
                from(rootPath + '/build/outputs/aar/')
                into(rootPath + '/build/outputs/aar/')
                rename('SensorsAnalyticsSDK-release.aar', 'SensorsAnalyticsSDK-' + version + '.aar')
            }
        }
    }
}

task sourceJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    dependsOn 'assembleRelease'
    source = android.sourceSets.main.java.srcDirs +
            'build/generated/not_namespaced_r_class_sources/release/generateReleaseRFile/out/com/sensorsdata/analytics/android/sdk/R.java'
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

javadoc {
    options {
        encoding "UTF-8"
        charSet 'UTF-8'
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

publishing {
    publications {
        mavenAndroid(MavenPublication) {
            groupId = 'com.sensorsdata.analytics.android'
            artifactId = 'SensorsAnalyticsSDK'
            version = version
            artifact sourceJar
            artifact javadocJar
            artifact('build/outputs/aar/SensorsAnalyticsSDK-release.aar')
            // 配置 pop 文件格式
            pom {
                packaging 'aar'
                name = 'The official Android SDK for Sensors Analytics.'
                description = 'The official Android SDK for Sensors Analytics.'
                url = 'The official Android SDK for Sensors Analytics.'
                licenses {
                    license {
                        name='The Apache Software License, Version 2.0'
                        url='http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'dengshiwei'
                        name = 'dengshiwei'
                        email = 'dengshiwei@sensorsdata.com'
                    }
                }
                scm {
                    connection = 'https://github.com/sensorsdata/sa-sdk-android'
                    developerConnection = 'https://github.com/sensorsdata/sa-sdk-android.git'
                    url = 'https://github.com/sensorsdata/sa-sdk-android'
                }
            }
        }
    }
    // 配置远程仓库
    repositories {
        Properties properties = new Properties()
        properties.load(project.rootProject.file('local.properties').newDataInputStream())
        def mavenUser = properties.getProperty("maven.user")
        def mavenPassword = properties.getProperty("maven.password")
        maven {
            url = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
            credentials {
                username mavenUser
                password mavenPassword
            }
        }
    }
}

// 对 mavenAndroid 发布内容进行签名
signing {
    sign publishing.publications.mavenAndroid
}